name: Translator CI / CD  

on:
   push:
     branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'


      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./src/main/resources/application.yml

      - name: make test application.yml
        run: |
          mkdir -p ./src/test/resources
          touch ./src/test/resources/application.yml
          echo "${{ secrets.PROPERTIES_TEST }}" > ./src/test/resources/application.yml

      - name: make docker-compose.yml
        run: |
          mkdir -p ./
          touch ./docker-compose.yml
          echo "${{ secrets.DOCKER_COMPOSE }}" > ./docker-compose.yml

      # Gradle Caching 을 통해서 빌드 과정 시간 단축
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 
      - name: Build with Gradle Wrapper
        run: |
          chmod +x ./gradlew
          ./gradlew build 
          
      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker image 빌드
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .


      # Docker image -> Docker Hub 로 푸쉬
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # SSH 로 EC2 instance 접근, 가장 최신 버전 Docker image pull 받고 Docker Compose 를 사용해서 빌드
      - name: SSH into EC2 and deploy Docker image using Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}
            cd /srv/teutoo-server/bin
            docker compose up --build translator-server -d
